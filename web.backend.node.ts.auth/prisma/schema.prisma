generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["app", "teltonika"]
}

model assets {
  id                BigInt              @id @default(autoincrement())
  uuid              String?             @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organisation_id   BigInt              @default(2)
  name              String              @db.VarChar(128)
  asset_type        String?             @db.VarChar(32)
  description       String?
  created_at        DateTime            @default(now()) @db.Timestamptz(6)
  updated_at        DateTime            @default(now()) @db.Timestamptz(6)
  organisations     organisations       @relation(fields: [organisation_id], references: [id], onDelete: SetDefault, onUpdate: NoAction)
  devices           devices[]
  user_asset_access user_asset_access[]

  @@index([name], map: "idx_assets_name")
  @@index([organisation_id], map: "idx_assets_organisation_id")
  @@schema("app")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model devices {
  id                 BigInt               @id @default(autoincrement())
  uuid               String?              @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organisation_id    BigInt               @default(2)
  asset_id           BigInt?
  external_id        String               @db.VarChar(64)
  external_id_type   String               @db.VarChar(16)
  protocol           String?              @db.VarChar(32)
  vendor             String?              @db.VarChar(64)
  model              String?              @db.VarChar(64)
  status             String               @default("new") @db.VarChar
  description        String?
  registered_at      DateTime             @default(now()) @db.Timestamptz(6)
  updated_at         DateTime             @default(now()) @db.Timestamptz(6)
  assets             assets?              @relation(fields: [asset_id], references: [id], onUpdate: NoAction)
  organisations      organisations        @relation(fields: [organisation_id], references: [id], onDelete: SetDefault, onUpdate: NoAction)
  user_device_access user_device_access[]

  @@unique([external_id, external_id_type], map: "idx_devices_idtype_org")
  @@index([status], map: "idx_devices_status")
  @@schema("app")
}

model organisations {
  id                       BigInt                     @id @default(autoincrement())
  uuid                     String                     @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String                     @db.VarChar(128)
  description              String?
  parent_org_id            BigInt?
  maps_api_key             String?                    @db.VarChar(255)
  can_inherit_key          Boolean?                   @default(true)
  created_at               DateTime                   @default(now()) @db.Timestamptz(6)
  updated_at               DateTime                   @default(now()) @db.Timestamptz(6)
  path                     String?
  assets                   assets[]
  devices                  devices[]
  organisations            organisations?             @relation("organisationsToorganisations", fields: [parent_org_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_organisations      organisations[]            @relation("organisationsToorganisations")
  user_organisation_access user_organisation_access[]
  users                    users[]

  @@index([name], map: "idx_organisations_name")
  @@schema("app")
}

model permissions {
  perm_id          Int                @id @db.SmallInt
  key              String             @unique
  description      String
  role_permissions role_permissions[]

  @@schema("app")
}

model role_permissions {
  role_id     Int         @db.SmallInt
  perm_id     Int         @db.SmallInt
  permissions permissions @relation(fields: [perm_id], references: [perm_id], onDelete: Cascade, onUpdate: NoAction)
  roles       roles       @relation(fields: [role_id], references: [role_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([role_id, perm_id])
  @@schema("app")
}

model roles {
  role_id          Int                @id @db.SmallInt
  name             String             @unique
  role_permissions role_permissions[]
  users            users[]

  @@schema("app")
}

model telemetry {
  id              BigInt   @default(autoincrement())
  device_id       BigInt
  asset_id        BigInt?
  organisation_id BigInt?
  timestamp       DateTime @db.Timestamptz(6)
  protocol        String   @db.VarChar(32)
  vendor          String?  @db.VarChar(64)
  model           String?  @db.VarChar(64)
  telemetry       Json
  created_at      DateTime @default(now()) @db.Timestamptz(6)

  @@id([id, timestamp])
  @@index([asset_id], map: "idx_teltonika_telemetry_asset_id")
  @@index([device_id], map: "idx_teltonika_telemetry_device_id")
  @@index([timestamp], map: "idx_teltonika_telemetry_timestamp")
  @@index([timestamp(sort: Desc)])
  @@schema("app")
}

model users {
  id                       BigInt                     @id @default(autoincrement())
  uuid                     String                     @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name               String
  last_name                String
  email                    String                     @unique
  password_hash            String
  role_id                  Int                        @db.SmallInt
  organisation_id          BigInt
  active                   Boolean                    @default(true)
  last_login_at            DateTime?                  @db.Timestamptz(6)
  created_at               DateTime                   @default(now()) @db.Timestamptz(6)
  updated_at               DateTime                   @default(now()) @db.Timestamptz(6)
  token_version            Int                        @default(1)
  user_asset_access        user_asset_access[]
  user_device_access       user_device_access[]
  user_organisation_access user_organisation_access[]
  organisations            organisations              @relation(fields: [organisation_id], references: [id], onUpdate: NoAction)
  roles                    roles                      @relation(fields: [role_id], references: [role_id], onUpdate: NoAction)

  @@index([organisation_id], map: "idx_users_organisation_id")
  @@schema("app")
}

model codec12_commands {
  id           BigInt    @id @default(autoincrement())
  uuid         String?   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  imei         String    @db.VarChar(20)
  command      String
  status       String    @default("pending") @db.VarChar(20)
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  sent_at      DateTime? @db.Timestamptz(6)
  responded_at DateTime? @db.Timestamptz(6)
  response     String?
  retries      Int       @default(0)
  comment      String?

  @@schema("teltonika")
}

model user_organisation_access {
  user_id           BigInt
  organisation_uuid String        @db.Uuid
  is_allowed        Boolean       @default(true)
  organisations     organisations @relation(fields: [organisation_uuid], references: [uuid], onDelete: Cascade, onUpdate: NoAction)
  users             users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, organisation_uuid])
  @@schema("app")
}

model user_asset_access {
  user_id    BigInt
  asset_id   BigInt
  is_allowed Boolean @default(true)
  assets     assets  @relation(fields: [asset_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, asset_id])
  @@schema("app")
}

model user_device_access {
  user_id    BigInt
  device_id  BigInt
  is_allowed Boolean @default(true)
  devices    devices @relation(fields: [device_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, device_id])
  @@schema("app")
}
